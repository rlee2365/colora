// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7821197814989437761),
      name: 'Project',
      lastPropertyId: const obx_int.IdUid(5, 1639930166387832011),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6091987459547460303),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 488487103284766475),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3202769354375025584),
            name: 'appLocalFilePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1304027855441958525),
            name: 'durMilliseconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1639930166387832011),
            name: 'dateUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'sections', srcEntity: 'Section', srcField: 'project')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 306749482424188798),
      name: 'Section',
      lastPropertyId: const obx_int.IdUid(5, 2010890195495838524),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8020218432502665100),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3762845994026739824),
            name: 'lyrics',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4958894905930946320),
            name: 'startMilliseconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2567995347118315330),
            name: 'projectId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 2430481325783023594),
            relationTarget: 'Project'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2010890195495838524),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 125831000704829797),
      name: 'CachedWaveform',
      lastPropertyId: const obx_int.IdUid(5, 4515149916455874654),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4182853129964620528),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 626596495757465504),
            name: 'noOfSamples',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2076260701664321004),
            name: 'waveform',
            type: 29,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4515149916455874654),
            name: 'fnv1aHash',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 125831000704829797),
      lastIndexId: const obx_int.IdUid(1, 2430481325783023594),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7848440554270060193],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5602177051828374057,
        7304585303296336598,
        6429916994914948224
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Project: obx_int.EntityDefinition<Project>(
        model: _entities[0],
        toOneRelations: (Project object) => [],
        toManyRelations: (Project object) => {
              obx_int.RelInfo<Section>.toOneBacklink(
                      4, object.id, (Section srcObject) => srcObject.project):
                  object.sections
            },
        getId: (Project object) => object.id,
        setId: (Project object, int id) {
          object.id = id;
        },
        objectToFB: (Project object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final appLocalFilePathOffset =
              fbb.writeString(object.appLocalFilePath);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, appLocalFilePathOffset);
          fbb.addInt64(3, object.durMilliseconds);
          fbb.addInt64(4, object.dateUpdated?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateUpdatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Project()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..appLocalFilePath = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..durMilliseconds =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..dateUpdated = dateUpdatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateUpdatedValue);
          obx_int.InternalToManyAccess.setRelInfo<Project>(
              object.sections,
              store,
              obx_int.RelInfo<Section>.toOneBacklink(
                  4, object.id, (Section srcObject) => srcObject.project));
          return object;
        }),
    Section: obx_int.EntityDefinition<Section>(
        model: _entities[1],
        toOneRelations: (Section object) => [object.project],
        toManyRelations: (Section object) => {},
        getId: (Section object) => object.id,
        setId: (Section object, int id) {
          object.id = id;
        },
        objectToFB: (Section object, fb.Builder fbb) {
          final lyricsOffset = fbb.writeString(object.lyrics);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, lyricsOffset);
          fbb.addInt64(2, object.startMilliseconds);
          fbb.addInt64(3, object.project.targetId);
          fbb.addInt64(4, object.color);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Section()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..lyrics = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..startMilliseconds =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..color =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.project.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.project.attach(store);
          return object;
        }),
    CachedWaveform: obx_int.EntityDefinition<CachedWaveform>(
        model: _entities[2],
        toOneRelations: (CachedWaveform object) => [],
        toManyRelations: (CachedWaveform object) => {},
        getId: (CachedWaveform object) => object.id,
        setId: (CachedWaveform object, int id) {
          object.id = id;
        },
        objectToFB: (CachedWaveform object, fb.Builder fbb) {
          final waveformOffset = fbb.writeListFloat64(object.waveform);
          final fnv1aHashOffset = fbb.writeString(object.fnv1aHash);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.noOfSamples);
          fbb.addOffset(3, waveformOffset);
          fbb.addOffset(4, fnv1aHashOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CachedWaveform()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..noOfSamples =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..waveform =
                const fb.ListReader<double>(fb.Float64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 10, [])
            ..fnv1aHash = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Project] entity fields to define ObjectBox queries.
class Project_ {
  /// See [Project.id].
  static final id =
      obx.QueryIntegerProperty<Project>(_entities[0].properties[0]);

  /// See [Project.name].
  static final name =
      obx.QueryStringProperty<Project>(_entities[0].properties[1]);

  /// See [Project.appLocalFilePath].
  static final appLocalFilePath =
      obx.QueryStringProperty<Project>(_entities[0].properties[2]);

  /// See [Project.durMilliseconds].
  static final durMilliseconds =
      obx.QueryIntegerProperty<Project>(_entities[0].properties[3]);

  /// See [Project.dateUpdated].
  static final dateUpdated =
      obx.QueryDateProperty<Project>(_entities[0].properties[4]);

  /// see [Project.sections]
  static final sections =
      obx.QueryBacklinkToMany<Section, Project>(Section_.project);
}

/// [Section] entity fields to define ObjectBox queries.
class Section_ {
  /// See [Section.id].
  static final id =
      obx.QueryIntegerProperty<Section>(_entities[1].properties[0]);

  /// See [Section.lyrics].
  static final lyrics =
      obx.QueryStringProperty<Section>(_entities[1].properties[1]);

  /// See [Section.startMilliseconds].
  static final startMilliseconds =
      obx.QueryIntegerProperty<Section>(_entities[1].properties[2]);

  /// See [Section.project].
  static final project =
      obx.QueryRelationToOne<Section, Project>(_entities[1].properties[3]);

  /// See [Section.color].
  static final color =
      obx.QueryIntegerProperty<Section>(_entities[1].properties[4]);
}

/// [CachedWaveform] entity fields to define ObjectBox queries.
class CachedWaveform_ {
  /// See [CachedWaveform.id].
  static final id =
      obx.QueryIntegerProperty<CachedWaveform>(_entities[2].properties[0]);

  /// See [CachedWaveform.noOfSamples].
  static final noOfSamples =
      obx.QueryIntegerProperty<CachedWaveform>(_entities[2].properties[1]);

  /// See [CachedWaveform.waveform].
  static final waveform =
      obx.QueryDoubleVectorProperty<CachedWaveform>(_entities[2].properties[2]);

  /// See [CachedWaveform.fnv1aHash].
  static final fnv1aHash =
      obx.QueryStringProperty<CachedWaveform>(_entities[2].properties[3]);
}
